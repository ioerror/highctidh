name: Alpine memory sanitizer

on:
  push:
  pull_request:
    branches: [ "main" ]

env:
  CC: clang

jobs:
  docker:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ASM: ["yes", "no"]
        CONTAINER: ["alpine:3.19.1", "alpine:3.19", "alpine:3.18.6",
                    "alpine:3.18", "alpine:3.17.7", "alpine:3.17"]
      fail-fast: false
    container: ${{ matrix.CONTAINER }}
    steps:
    - uses: actions/checkout@v4

    - name: Install alpine deps
      run: |
        ./misc/install-alpine-deps.sh
        echo "PKG_CONFIG_PATH=${HOME}/inst/lib/pkgconfig" >> $GITHUB_ENV

    - name: Build C library with msan and large stack
      if: ${{ matrix.ASM == 'no' }}
      env:
        CFLAGS: -fsanitize=memory -fno-omit-frame-pointer -fsanitize-memory-param-retval -fsanitize-memory-track-origins -g3 -fno-lto
        LDFLAGS: -Wl,-z,stack-size=0x1F40000
      run: |
        autoreconf -fi
        ./configure --prefix="${HOME}/inst" --disable-shared --enable-static --enable-asm=${{ matrix.ASM }} && make install

    - name: Build and install C library with asan and default stack
      if: ${{ matrix.ASM == 'yes' }}
      env:
        CFLAGS: -fsanitize=address -fno-omit-frame-pointer -g3 -fno-lto
      run: |
        autoreconf -fi
        ./configure --prefix="${HOME}/inst" --disable-shared --enable-static --enable-asm=${{ matrix.ASM }} && make install

    - name: Show go env
      run: go env

    - name: Build and test 511 with msan
      run: cd src/ctidh511 && go test -v -o msan-test -msan ./...

    - name: Build and test 512 with msan
      run: cd src/ctidh512 && go test -v -o msan-test -msan ./...

    - name: Build and test 1024 with msan
      run: cd src/ctidh1024 && go test -v -o msan-test -msan ./...

    - name: Build and test 2048 with msan
      run: cd src/ctidh2048 && go test -v -o msan-test -msan ./...
