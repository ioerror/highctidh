name: Address and memory sanitizer

on:
  push:
  pull_request:
    branches: [ "main" ]

env:
  CC: clang

jobs:
  docker:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        CONTAINER: [
          "alpine:3.17",
          "alpine:3.17.7",
          "alpine:3.18",
          "alpine:3.18.6",
          "alpine:3.19",
          "alpine:3.19.1",
          "ubuntu:24.04",
          "ubuntu:24.10",
        ]
        SANITIZER: [asan, msan, tsan]
        ASM: [asm=no, asm=yes]
      fail-fast: false
    container: ${{ matrix.CONTAINER }}
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: misc/install-deps.sh ${{ matrix.CONTAINER }} --sanitizer --golang

    - name: asan CFLAGS
      if: matrix.SANITIZER == 'asan'
      run: echo CFLAGS="-fsanitize=address" >> $GITHUB_ENV

    - name: msan CFLAGS
      if: matrix.SANITIZER == 'msan'
      run: echo CFLAGS="-fsanitize=memory -fsanitize-memory-param-retval -fsanitize-memory-track-origins -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang" >> $GITHUB_ENV

    - name: tsan CFLAGS
      if: matrix.SANITIZER == 'tsan'
      run: echo CFLAGS="-fsanitize=thread" >> $GITHUB_ENV

    - name: Build and install library
      run: |
        autoreconf -fi
        ./configure --prefix="${HOME}/inst" --disable-silent-rules --disable-shared --enable-static --enable-${{ matrix.ASM }} --enable-debug
        make install
        echo PKG_CONFIG_PATH="${HOME}/inst/lib/pkgconfig" >> $GITHUB_ENV

    - name: CGO_LDFLAGS for 1MB stack on Alpine
      if: startsWith(matrix.CONTAINER, 'alpine:')
      run: echo CGO_LDFLAGS=-Wl,-z,stack-size=0x100000 >> $GITHUB_ENV

    - name: Show go env
      run: go env

    - name: Build and test 511
      run: cd src/ctidh511 && go test -v -o san-test -timeout 0 -${{ matrix.SANITIZER }} ./...

    - name: Build and test 512
      run: cd src/ctidh512 && go test -v -o san-test -timeout 0 -${{ matrix.SANITIZER }} ./...

    - name: Build and test 1024
      run: cd src/ctidh1024 && go test -v -o san-test -timeout 0 -${{ matrix.SANITIZER }} ./...

    - name: Build and test 2048
      run: cd src/ctidh2048 && go test -v -o san-test -timeout 0 -${{ matrix.SANITIZER }} ./...

    - name: Show config.log
      if: failure()
      run: |
        sanitized_container="${{ matrix.CONTAINER }}"
        sanitized_container="${sanitized_container//:/-}"
        echo "sanitized_container=$sanitized_container" >> $GITHUB_ENV

    - name: Upload artifact
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: config-log-${{ env.sanitized_container }}-${{ matrix.SANITIZER }}-${{ matrix.ASM }}
        path: config.log
