!YS-v0

ns: common

defn workflow-setup(name=nil)::
  :when name::
    name:: name
  on:
    push:
    pull_request:
      branches: [main]

defn bash(name):
  slurp: "bash/$name.bash"

defn make(target args=""):
  target =: target.when(" $target")
  args =: args.?.when(" $args")
  =>: "CC=${{ matrix.CC }}$args
        HIGHCTIDH_PORTABLE=${{ matrix.PORTABLE }}
        make$target"

defn asan-test(type): "\
  cd src/ctidh$type &&
    HIGHCTIDH_PORTABLE=${{ matrix.PORTABLE }}
    go test -o asan-test -timeout 0 -asan -v ./..."

defn docker-ubuntu(container):
  containers =:
    if string?(container): + [container] container
  =>::
    runs-on: ubuntu-latest
    strategy:
      matrix:
        PORTABLE: ['0', '1']
        CONTAINER:: containers
      fail-fast: false
    container: ${{ matrix.CONTAINER }}

defn docker-ubuntu-clang-gcc(container):
  containers =:
    if string?(container): + [container] container
  =>::
    runs-on: ubuntu-latest
    strategy:
      matrix:
        CC: [clang, gcc]
        PORTABLE: ['0', '1']
        CONTAINER:: containers
      fail-fast: false
    container: ${{ matrix.CONTAINER }}

defn docker-ubuntu-clang(platforms)::
  runs-on: ubuntu-latest
  strategy:
    matrix:
      CC: [clang]
      PORTABLE: ['1']
      CONTAINER: [alpine]
      DOCKER_ARCH_ARGS::
        platforms.map(\('--platform ' + _))
    fail-fast: false


alpine-containers =::
- alpine:3.19.1
- alpine:3.19
- alpine:3.18.6
- alpine:3.18
- alpine:3.17.7
- alpine:3.17

clang-platforms =::
- linux/arm64/v8 arm64v8/alpine
- linux/amd64 amd64/alpine
- linux/riscv64 riscv64/alpine:edge
- linux/ppc64le ppc64le/alpine
- linux/s390x s390x/alpine

clang-platforms-2 =::
- linux/arm/v6 arm32v6/alpine
- linux/arm/v7 arm32v7/alpine
- linux/i386 i386/alpine
